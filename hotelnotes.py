# -*- coding: utf-8 -*-
"""hotelnotes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G5QrzMqdfGaekDOry8nYalNJMqdCd_xu

# **1. Import Library**
"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import RandomizedSearchCV
import seaborn as sns
import numpy as np
import time
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.metrics import confusion_matrix
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

"""# **2. Load Dataset**"""

df

df["reservation_status_date"] = pd.to_datetime(df["reservation_status_date"])

"""Informasi dataframe"""

df.info()

def showplot(df, column):
    count_data = df[column].value_counts()
    fig, ax = plt.subplots(1, 2, figsize=(12, 6))

    plt.rcParams['font.family'] = 'Verdana'

    colors = plt.cm.Paired.colors
    ax[0].pie(
        count_data.values, labels=None, autopct='%1.1f%%', startangle=90,
        colors=colors, pctdistance=0.85, wedgeprops=dict(width=0.3)
    )
    ax[0].set_title(f"Distribution of {column} (%)", fontname='Verdana', fontsize=14, fontweight='bold')

    bars = ax[1].barh(count_data.index, count_data.values, color=colors)
    ax[1].set_title(f"{column} Count", fontname='Verdana', fontsize=14, fontweight='bold')
    ax[1].set_xlabel("Count", fontname='Verdana', fontsize=12)
    ax[1].invert_yaxis()

    for bar in bars:
        x_val = bar.get_width()
        y_val = bar.get_y() + bar.get_height() / 2
        ax[1].text(x_val - 50, y_val, f'{int(x_val)}', va='center', ha='right',
                   fontname='Verdana', fontsize=12, fontweight='bold', color='white')

    ax[0].legend(count_data.index, loc="best", prop={'family': 'Verdana', 'size': 10})

    plt.tight_layout()
    plt.show()

"""Sebaran letak hotel"""

showplot(df, 'hotel')

"""Sebaran status reservasi"""

showplot(df,'is_canceled')

"""Perbandingan status booking hotel resort dan hotel di perkotaan"""

plt.figure(figsize=(10, 6))

ax1 = sns.countplot(x='hotel', hue='is_canceled', data=df, palette='Blues')
legend_labels, _ = ax1.get_legend_handles_labels()
ax1.legend(bbox_to_anchor=(1, 1))

plt.title('Reservation status in different hotels', size=20, color='Black', fontname='Verdana')
plt.ylabel('Number of Reservations', color='Black', fontname='Verdana')
plt.xlabel('Hotel', color='Black', fontname='Verdana')

plt.legend(['Not Cancelled', 'Cancelled'])

plt.show()

adr_per_bulan = df.groupby('arrival_date_month')['adr'].mean().reset_index()

plt.figure(figsize=(12,6))
sns.barplot(data=adr_per_bulan, x='arrival_date_month', y='adr', palette='Blues')
plt.title('Average Daily Rate (ADR) per Bulan')
plt.xlabel('Bulan Kedatangan')
plt.ylabel('Rata-rata Harga per Kamar')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Histogram"""

df.hist(figsize=(20,14))
plt.show()

"""Sebaran jarak booking dengan kedatangan"""

plt.figure(figsize=(20, 6))
sns.histplot(data=df, x='lead_time', kde=True)
plt.title('Lead_Time Distribution')
plt.ylabel('Number of Reservations')
plt.xlabel('Lead Time (days)')

"""Grafik perubahan harga mengikuti tanggal dengan status pembatalan"""

mask = (df['reservation_status_date'] > '2015-01-01') & (df['reservation_status_date'] < '2017-12-31')
filtered_df = df[mask]

adr_by_status = (
    filtered_df
    .groupby(['reservation_status_date', 'is_canceled'])['adr']
    .mean()
    .unstack()
)

plt.figure(figsize=(20, 6))
adr_by_status.plot(ax=plt.gca())
plt.title('Average Daily Rate (ADR) per Tanggal')
plt.xlabel('Tanggal')
plt.ylabel('ADR')
plt.legend(['Not Cancelled', 'Cancelled'], title='Status')
plt.tight_layout()
plt.show()

df.describe()

"""# **4. Data Preprocessing**

Periksa baris yang kosong
"""

df.isna().sum()

df = df.drop(['company','agent','country', 'reservation_status_date','market_segment','distribution_channel','arrival_date_year','reservation_status'], axis=1)
df = df.dropna()

"""Mengubah tipe data float ke int"""

exclude_cols = ['adr']
float_columns = [col for col in df.select_dtypes(include=['float64']).columns if col not in exclude_cols]
df[float_columns] = df[float_columns].astype('int')

"""Cek data duplikat"""

df = df.drop_duplicates()
df.duplicated().sum()

df

"""Melakukan encoding pada data categorical"""

list_cate = [col for col in df.columns if df[col].dtype == 'object']

le = LabelEncoder()

for col in list_cate:
    df[col] = le.fit_transform(df[col])

df.value_counts().sum()

"""# **5. Data Splitting**

split dataset fitur dan label
"""

X = df.drop(['is_canceled'], axis=1)
y = df['is_canceled']

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state=42)

X_test.value_counts().sum()

df['is_canceled'].value_counts()

"""# **6. Model**

Train model Random Forest
"""

clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)

"""Buat prediksi berdasarkan dataset train dan test"""

y_preds = clf.predict(X_test)
y_train_preds = clf.predict(X_train)

"""Akurasi prediksi model terhadap data train"""

print(f"Accurracy: {accuracy_score(y_train, y_train_preds)*100:.2f}%")
print(f"Precision: {precision_score(y_train, y_train_preds, average='weighted')}")
print(f"Recall: {recall_score(y_train, y_train_preds, average='weighted')}")
print(f"F1: {f1_score(y_train, y_train_preds, average='weighted')}")

"""Akurasi prediksi model terhadap data test"""

print(f"Accurracy: {accuracy_score(y_test, y_preds)*100:.2f}%")
print(f"Precision: {precision_score(y_test, y_preds, average='weighted')}")
print(f"Recall: {recall_score(y_test, y_preds, average='weighted')}")
print(f"F1: {f1_score(y_test, y_preds, average='weighted')}")

print(classification_report(y_test, y_preds))

confusion_matrix(y_test, y_preds)

pd.crosstab(y_test,y_preds,
            rownames = ["Actual Labels"],
            colnames = ["Predicted Labels"])

"""Train model Logistic Regression"""

clf_lin = LogisticRegression(random_state=42)
clf_lin.fit(X_train, y_train)

"""Buat prediksi berdasarkan data train dan test"""

lin_y_preds = clf_lin.predict(X_test)
lin_y_train_preds = clf_lin.predict(X_train)

"""Akurasi prediksi terhadap data train"""

print(f"Accurracy: {accuracy_score(y_train, lin_y_train_preds)*100:.2f}%")
print(f"Precision: {precision_score(y_train, lin_y_train_preds, average='weighted')}")
print(f"Recall: {recall_score(y_train, lin_y_train_preds, average='weighted')}")
print(f"F1: {f1_score(y_train, lin_y_train_preds, average='weighted')}")

"""Akurasi prediksi terhadap data test

"""

print(f"Accurracy: {accuracy_score(y_test, lin_y_preds)*100:.2f}%")
print(f"Precision: {precision_score(y_test, lin_y_preds, average='weighted')}")
print(f"Recall: {recall_score(y_test, lin_y_preds, average='weighted')}")
print(f"F1: {f1_score(y_test, lin_y_preds, average='weighted')}")

print(classification_report(y_test, lin_y_preds))

"""# **7. Tuning Model**

Random Forest Tuning dengan Random Search
"""

param_distributions = {"n_estimators": [10, 100, 200, 500, 1000, 1200],
                       "max_depth": [None, 5, 10, 20, 30],
                       "max_features": ["sqrt", "log2", None],
                       "min_samples_split": [2, 4, 6, 8],
                       "min_samples_leaf": [1, 2, 4, 8]}

start_time = time.time()

np.random.seed(42)

clf = RandomForestClassifier(n_jobs=-1)

n_iter = 30
rs_clf = RandomizedSearchCV(estimator=clf,
                            param_distributions=param_distributions,
                            n_iter=n_iter,
                            cv=5,
                            verbose=2)

rs_clf.fit(X_train, y_train);

end_time = time.time()
print(f"[INFO] Total time taken for {n_iter} random combinations of hyperparameters: {end_time - start_time:.2f} seconds.")

"""Logistic Regression Tuning dengan Random Search"""

start_time = time.time()

np.random.seed(42)

clf_lin = LogisticRegression(n_jobs=-1)

n_iter = 30
param_distributions_lin = {
    'C': np.logspace(-4, 4, 10),
    'penalty': ['l1', 'l2'],
    'solver': ['saga', 'liblinear'],
    'max_iter': [500, 1000, 2000]
}
rs_clf_lin = RandomizedSearchCV(estimator=clf_lin,
                            param_distributions=param_distributions_lin,
                            n_iter=n_iter,
                            cv=5,
                            verbose=2)

rs_clf_lin.fit(X_train, y_train);

end_time = time.time()

"""# **8. Evaluasi Tuning**

Evaluasi Random Forest
"""

rs_clf.best_params_

rs_y_preds = rs_clf.predict(X_test)
print(f"Accurracy: {accuracy_score(y_test, rs_y_preds)*100:.2f}%")
print(f"Precision: {precision_score(y_test, rs_y_preds, average='weighted')}")
print(f"Recall: {recall_score(y_test, rs_y_preds, average='weighted')}")
print(f"F1: {f1_score(y_test, rs_y_preds, average='weighted')}")

print(classification_report(y_test, rs_y_preds))

"""Evaluasi Linear Regression"""

lin_rs_y_preds = rs_clf_lin.predict(X_test)
print(f"Accurracy: {accuracy_score(y_test, lin_rs_y_preds)*100:.2f}%")
print(f"Precision: {precision_score(y_test, lin_rs_y_preds, average='weighted')}")
print(f"Recall: {recall_score(y_test, lin_rs_y_preds, average='weighted')}")
print(f"F1: {f1_score(y_test, lin_rs_y_preds, average='weighted')}")

print(classification_report(y_test, lin_rs_y_preds))

